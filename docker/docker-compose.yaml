version: "3.3"

services:

  producer:
    build: 
      context: ../Producer/
      dockerfile: ./docker/.dockerfile
    environment:
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionStrings__Default=Data Source=sqlserver; Initial Catalog=SaleDatabase; User Id=sa;Password=MyP4ssw0rd_; Pooling=True; Min Pool Size=100; Max Pool Size=300
      - ElasticApm__ServerUrl=http://apm-server:8200
      - ProducerConfig__BootstrapServers=kafka:9092
    ports: 
      - 8080:80
    networks: 
      - frontend
      - backend
      - elastic
    depends_on: 
      - kafka
      - sqlserver

  zookeeper:
    image: "docker.io/bitnami/zookeeper:3"
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks: 
      - backend

  kafka:
    image: "docker.io/bitnami/kafka:2-debian-10"
    ports:
      - "9092:9092"
      - "9093:9093"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper
    networks: 
      - backend

  sqlserver:
    build:
      context: ./sqlserver/.
      dockerfile: sqlserver.DockerFile
    ports:
      - "1433:1433"
    networks: 
      - frontend
      - backend

  mongo:
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: s4lesc0nsum3r
    ports:
      - "27017:27017"
    volumes:
      - ./data/mongo:/data/db
      - ./initdb.js:/docker-entrypoint-initdb.d/mongo-init.js
    networks:
      - backend  
 
  # apm-server:
  #   image: docker.elastic.co/apm/apm-server:7.11.1
  #   depends_on:
  #     elasticsearch:
  #       condition: service_healthy
  #     kibana:
  #       condition: service_healthy
  #   cap_add: ["CHOWN", "DAC_OVERRIDE", "SETGID", "SETUID"]
  #   cap_drop: ["ALL"]
  #   ports:
  #     - 8200:8200
  #   networks:
  #     - elastic
  #     - backend
  #   command: >
  #     apm-server -e
  #       -E apm-server.rum.enabled=true
  #       -E setup.kibana.host=kibana:5601
  #       -E setup.template.settings.index.number_of_replicas=0
  #       -E apm-server.kibana.enabled=true
  #       -E apm-server.kibana.host=kibana:5601
  #       -E output.elasticsearch.hosts=["elasticsearch:9200"]
  #   healthcheck:
  #     interval: 10s
  #     retries: 12
  #     test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:8200/

  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:7.11.1
  #   environment:
  #     - bootstrap.memory_lock=true
  #     - cluster.name=docker-cluster
  #     - cluster.routing.allocation.disk.threshold_enabled=false
  #     - discovery.type=single-node
  #     - ES_JAVA_OPTS=-XX:UseAVX=2 -Xms1g -Xmx1g
  #   ulimits:
  #     memlock:
  #       hard: -1
  #       soft: -1
  #   volumes:
  #     - esdata:/usr/share/elasticsearch/data
  #   ports:
  #     - 9200:9200
  #   networks:
  #     - elastic
  #   healthcheck:
  #     interval: 20s
  #     retries: 10
  #     test: curl -s http://localhost:9200/_cluster/health | grep -vq '"status":"red"'

  # kibana:
  #   image: docker.elastic.co/kibana/kibana:7.11.1
  #   depends_on:
  #     elasticsearch:
  #       condition: service_healthy
  #   environment:
  #     ELASTICSEARCH_URL: http://elasticsearch:9200
  #     ELASTICSEARCH_HOSTS: http://elasticsearch:9200
  #   ports:
  #     - 5601:5601
  #   networks:
  #     - elastic
  #   healthcheck:
  #     interval: 10s
  #     retries: 20
  #     test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:5601/api/status      

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  esdata:
    driver: local

networks:
  elastic:
    driver: bridge
  backend:
    driver: bridge
  frontend:
